{
    parserClass="cz.cuni.mff.kyjovsm.robocop.parser.RobotFrameworkParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="RobotFramework"
    psiImplClassSuffix="Impl"
    psiPackage="cz.cuni.mff.kyjovsm.robocop.psi"
    psiImplPackage="cz.cuni.mff.kyjovsm.robocop.psi.impl"

    elementTypeHolderClass="cz.cuni.mff.kyjovsm.robocop.psi.RobotFrameworkTypes"
    elementTypeClass="cz.cuni.mff.kyjovsm.robocop.psi.RobotFrameworkElementType"
    tokenTypeClass="cz.cuni.mff.kyjovsm.robocop.psi.RobotFrameworkTokenType"

    psiImplUtilClass="cz.cuni.mff.kyjovsm.robocop.psi.impl.RobotFrameworkPsiImplUtil"
}


EMPTY_LINE ::= END_OF_LINE* NEW_LINE_TOKEN { pin=2 }
private END_OF_LINE ::= COLUMN_SEP_TOKEN | WHITESPACE_TOKEN | COMMENT_TOKEN
private not_a_newline_token ::= ! NEW_LINE_TOKEN
ERROR ::= INVALID_SYNTAX_TOKEN


/*Definition of the top-level Robot Framework File Sections
i.e *** SETTINGS ***, *** VARIABLES ***, etc. */
robotFrameworkFile ::= (TABLE | EMPTY_LINE)* END_OF_LINE*

TABLE ::= (SETTINGS_TABLE | VARIABLES_TABLE | TEST_CASES_TABLE | KEYWORDS_TABLE)


/*Configuration of grammar for Settings Section*/
SETTINGS_TABLE ::= SETTINGS_TABLE_HEADER (SETTING_LINE EMPTY_LINE | EMPTY_LINE)* (SETTING_LINE END_OF_LINE* <<eof>>)? { pin=2 }
SETTINGS_TABLE_HEADER ::= SETTINGS_TABLE_HEADER_TOKEN EMPTY_LINE
SETTING_LINE ::= WHITESPACE_TOKEN SETTING END_OF_LINE* |
                   ELLIPSES_LINE_SETTINGS END_OF_LINE* {recoverWhile="not_a_newline_token"}

private ELLIPSES_LINE_SETTINGS ::= COLUMN_SEP_TOKEN? WHITESPACE_TOKEN? ELLIPSES

SETTING ::= LIBRARY_SETTING |
            VARIABLES_SETTING |
            RESOURCE_SETTING |
            DOCUMENTATION_SETTING |
            METADATA_SETTING |
            SUITE_SETUP_SETTING |
            SUITE_TEARDOWN_SETTING |
            FORCE_TAGS_SETTING |
            DEFAULT_TAGS_SETTING |
            TEST_SETUP_SETTING |
            TEST_TEARDOWN_SETTING |
            TEST_TEMPLATE_SETTING |
            TEST_TIMEOUT_SETTING

LIBRARY_SETTING ::= LIBRARY_SETTING_TOKEN COLUMN_SEP_TOKEN LIBRARY_REFERENCE SETTING_LIST_OR_ELLIPSES* { pin=3 }
LIBRARY_REFERENCE ::= LIBRARY_TOKEN {methods=[getReference getReferences]}
SETTING_LIST_OR_ELLIPSES ::= SETTING_LIST | ELLIPSES_FOR_SETTING_TABLE
SETTING_LIST ::= (COLUMN_SEP_TOKEN KEYWORD_ARG)+
ELLIPSES_FOR_SETTING_TABLE ::= EMPTY_LINE WHITESPACE_TOKEN? COLUMN_SEP_TOKEN? ELLIPSES
ELLIPSES ::= ELLIPSES_TOKEN

VARIABLES_SETTING ::= VARIABLES_SETTING_TOKEN ELLIPSES_FOR_SETTING_TABLE* COLUMN_SEP_TOKEN REFERENCED_FILE { pin=1 }
RESOURCE_SETTING ::= RESOURCE_SETTING_TOKEN ELLIPSES_FOR_SETTING_TABLE* COLUMN_SEP_TOKEN REFERENCED_FILE { pin=1 }
REFERENCED_FILE ::= RF_FILE_TOKEN { methods=[getReference getReferences getName setName getNameIdentifier handleElementRename getPresentation toString]}

DOCUMENTATION_SETTING ::= DOCUMENTATION_SETTING_TOKEN DOCUMENTATION_OR_ELLIPSES* { pin=1 }
private DOCUMENTATION_OR_ELLIPSES ::= (COLUMN_SEP_TOKEN DOCUMENTATION_TOKEN) | ELLIPSES_FOR_SETTING_TABLE { pin=1 }

FORCE_TAGS_SETTING ::= FORCE_TAGS_SETTING_TOKEN TAG_LIST_OR_ELLIPSES_NO_COL* { pin = 1 }


DEFAULT_TAGS_SETTING ::= DEFAULT_TAGS_SETTING_TOKEN TAG_LIST_OR_ELLIPSES_NO_COL* {pin=1}

private TAG_LIST_OR_ELLIPSES_NO_COL ::= TAG_LIST | ELLIPSES_FOR_SETTING_TABLE
private TAG_LIST ::= (COLUMN_SEP_TOKEN TAG)+
TAG ::= TAG_TOKEN

METADATA_SETTING ::= METADATA_SETTING_TOKEN SETTING_LIST_OR_ELLIPSES* { pin=1 }

TEST_TIMEOUT_SETTING ::= TEST_TIMEOUT_SETTING_TOKEN ELLIPSES_FOR_SETTING_TABLE+ COLUMN_SEP_TOKEN TIMEOUT_UNITS_TOKEN |
                         TEST_TIMEOUT_SETTING_TOKEN  COLUMN_SEP_TOKEN TIMEOUT_UNITS_TOKEN { pin=1 }

TEST_TEMPLATE_SETTING ::= TEST_TEMPLATE_SETTING_TOKEN ELLIPSES_FOR_SETTING_TABLE* COLUMN_SEP_TOKEN KEYWORD

SUITE_SETUP_SETTING ::= SUITE_SETUP_SETTING_TOKEN ELLIPSES_FOR_SETTING_TABLE+ COLUMN_SEP_TOKEN KEYWORD_INVOCATION_SETTINGS |
                        SUITE_SETUP_SETTING_TOKEN COLUMN_SEP_TOKEN KEYWORD_INVOCATION_SETTINGS { pin=1 }

SUITE_TEARDOWN_SETTING ::= SUITE_TEARDOWN_SETTING_TOKEN ELLIPSES_FOR_SETTING_TABLE+ COLUMN_SEP_TOKEN KEYWORD_INVOCATION_SETTINGS |
                        SUITE_TEARDOWN_SETTING_TOKEN COLUMN_SEP_TOKEN KEYWORD_INVOCATION_SETTINGS { pin=1 }

TEST_TEARDOWN_SETTING ::= TEST_TEARDOWN_SETTING_TOKEN ELLIPSES_FOR_SETTING_TABLE+ COLUMN_SEP_TOKEN KEYWORD_INVOCATION_SETTINGS |
                        TEST_TEARDOWN_SETTING_TOKEN COLUMN_SEP_TOKEN KEYWORD_INVOCATION_SETTINGS { pin=1 }

TEST_SETUP_SETTING ::= TEST_SETUP_SETTING_TOKEN ELLIPSES_FOR_SETTING_TABLE+ COLUMN_SEP_TOKEN KEYWORD_INVOCATION_SETTINGS |
                       TEST_SETUP_SETTING_TOKEN COLUMN_SEP_TOKEN KEYWORD_INVOCATION_SETTINGS { pin=1 }

/*VARIABLES Section - Grammar definition*/
VARIABLES_TABLE ::= VARIABLES_TABLE_HEADER (VARIABLE_LINE EMPTY_LINE | EMPTY_LINE)* (VARIABLE_LINE END_OF_LINE* <<eof>>)? { pin=2 }

VARIABLES_TABLE_HEADER ::= VARIABLES_TABLE_HEADER_TOKEN EMPTY_LINE // basically *** Variables *** + anything after, i.e. comments, whitespaces, columns separators and newline

VARIABLE_LINE ::= SCALAR_ASSIGNMENT_LHS (ASSIGNABLE_IN_VARIABLES_TBL)? END_OF_LINE* |
                  ARRAY_ASSIGNMENT_LHS (ARRAY_ASSIGNABLE_IN_VARIABLES_TBL)? END_OF_LINE* |
                  ELLIPSES_LINE_SETTINGS END_OF_LINE* {recoverWhile="not_a_newline_token"}

SCALAR_VARIABLE ::= VARIABLE_TOKEN { methods=[getReference getReferences getName setName getNameIdentifier handleElementRename toString] }
ARRAY_VARIABLE  ::= ARRAY_VARIABLE_TOKEN
SCALAR_ASSIGNMENT ::= ASSIGNMENT_TOKEN { methods=[getReference getReferences getName setName getNameIdentifier handleElementRename toString]}
ARRAY_ASSIGNMENT ::= ARRAY_ASSIGNMENT_TOKEN
SINGLE_VARIABLE_LIST ::= SCALAR_VARIABLE ((COLUMN_SEP_TOKEN SCALAR_VARIABLE) | INDENTED_ELLIPSES_FOR_TEST_TABLE)+ | SCALAR_VARIABLE
VARIABLE ::= SCALAR_VARIABLE | ARRAY_VARIABLE
ASSIGNMENT ::= SCALAR_ASSIGNMENT | ARRAY_ASSIGNMENT

SCALAR_ASSIGNMENT_LHS ::= SCALAR_VARIABLE | SCALAR_ASSIGNMENT { methods=[getName setName getReference getReferences getNameIdentifier handleElementRename toString]}
ARRAY_ASSIGNMENT_LHS  ::= ARRAY_VARIABLE | ARRAY_ASSIGNMENT
SINGLE_ASSIGNMENT_LHS ::= SCALAR_ASSIGNMENT_LHS | ARRAY_ASSIGNMENT_LHS
MULTI_ASSIGNMENT_LHS  ::= VARIABLE (COLUMN_SEP_TOKEN VARIABLE)*  COLUMN_SEP_TOKEN ASSIGNMENT
                       |  VARIABLE (COLUMN_SEP_TOKEN  VARIABLE)+

/*TEST CASES Section - Grammar definition*/
TEST_CASES_TABLE ::= TEST_CASES_TABLE_HEADER EMPTY_LINE* TEST_CASE* { pin=3 methods=[getNameIdentifier getPresentation] }

TEST_CASES_TABLE_HEADER ::= TEST_CASES_TABLE_HEADER_TOKEN END_OF_LINE* (NEW_LINE_TOKEN | <<eof>>)

TEST_CASE ::= TEST_CASE_NAME (TEST_CASE_LINE EMPTY_LINE | EMPTY_LINE)* (TEST_CASE_LINE END_OF_LINE* <<eof>>)? { pin=3 methods=[getName setName getNameIdentifier getPresentation] }

TEST_CASE_NAME ::= TEST_CASE_NAME_TOKEN

TEST_CASE_LINE ::= TEST_CASE_SETTING_LINE END_OF_LINE* |
                   TEST_EXECUTION_LINE END_OF_LINE* |
                   ELLIPSES_TEST_CASE_LINE END_OF_LINE* |
                   FOR_LOOPS END_OF_LINE* |
                   KEYWORD_ARG_LIST END_OF_LINE* |
                   COLUMN_SEP_TOKEN { recoverWhile="not_a_newline_token" }

FOR_LOOPS ::= FOR_LOOP_IN | FOR_LOOP_IN_RANGE

FOR_LOOP_IN ::= COLUMN_SEP_TOKEN FOR_LOOP_PREFIX

FOR_LOOP_PREFIX ::= FOR_KEYWORD_TOKEN INDENTED_ELLIPSES_FOR_TEST_TABLE* COLUMN_SEP_TOKEN SINGLE_VARIABLE_LIST COLUMN_SEP_TOKEN IN_TOKEN

TEST_EXECUTION_LINE ::= COLUMN_SEP_TOKEN (KEYWORD_CALLING_TEST | VARIABLE_ASSIGN_TO_KEYWORD ) { pin=2 }

TEST_CASE_SETTING_LINE ::= COLUMN_SEP_TOKEN TEST_CASE_SETTING { pin=2 }
TEST_CASE_SETTING ::= (TEST_CASE_DOCUMENTATION|TEST_CASE_TAGS|TEST_CASE_SETUP|TEST_CASE_TEARDOWN|TEST_CASE_TEMPLATE|TEST_CASE_TIMEOUT)

TEST_CASE_DOCUMENTATION ::= TEST_CASE_DOCUMENTATION_TOKEN (ELLIPSES_FOR_TEST_CASES_TABLE? COLUMN_SEP_TOKEN DOCUMENTATION_TOKEN)* { pin=1 }
TEST_CASE_TAGS ::= TEST_CASE_TAGS_TOKEN TAG_LIST_OR_ELLIPSES {pin = 1}
TEST_CASE_SETUP ::= TEST_CASE_SETUP_TOKEN COLUMN_SEP_TOKEN KEYWORD_CALLING_SETTINGS { pin=1 }
TEST_CASE_TEARDOWN ::= TEST_CASE_TEARDOWN_TOKEN COLUMN_SEP_TOKEN KEYWORD_CALLING_SETTINGS { pin= 1}
TEST_CASE_TEMPLATE ::= TEST_CASE_TEMPLATE_TOKEN COLUMN_SEP_TOKEN KEYWORD { pin=1 }
TEST_CASE_TIMEOUT ::= TEST_CASE_TIMEOUT_TOKEN COLUMN_SEP_TOKEN TIMEOUT_UNITS_TOKEN { pin=1 }

private ELLIPSES_FOR_TEST_CASES_TABLE ::= EMPTY_LINE COLUMN_SEP_TOKEN ELLIPSES
private TAG_LIST_OR_ELLIPSES ::= TAG_LIST | ELLIPSES_FOR_TEST_CASES_TABLE
private ELLIPSES_TEST_CASE_LINE ::= COLUMN_SEP_TOKEN ELLIPSES { pin=2 }
private INDENTED_ELLIPSES_FOR_TEST_TABLE  ::= END_OF_LINE* NEWL_INE_TOKEN COLUMN_SEP_TOKEN EMPTY_CELL_TOKEN COLUMN_SEP_TOKEN ELLIPSES


KEYWORD_CALLING_SETTINGS ::= KEYWORD (KEYWORD_ARG_LIST | ELLIPSES_FOR_SETTING_TABLE)+ | KEYWORD
KEYWORD_CALLING_TEST ::= KEYWORD (KEYWORD_ARG_LIST | ELLIPSES_FOR_TEST_CASES_TABLE)* { pin=2 }
KEYWORD ::= RF_KEYWORD_TOKEN { methods=[getName setName getNameIdentifier getReference getReferences handleElementRename toString] }
KEYWORD_ARG ::= VARIABLE | RF_KEYWORD_ARG_TOKEN | EMPTY_CELL_TOKEN | INTEGER_TOKEN | ARRAY_VARIABLE_ACCESS_TOKEN | RF_KEYWORD_TOKEN { methods=[getReference getReferences getName setName handleElementRename getNameIdentifier] }
KEYWORD_TITLE ::= RF_KEYWORD_NAME_TOKEN { methods=[getName setName getNameIdentifier getPresentation toString getRegex] }
KEYWORD_ARG_LIST ::= (COLUMN_SEP_TOKEN KEYWORD_ARG)+
VARIABLE_ASSIGN_TO_KEYWORD ::= (MULTI_ASSIGNMENT_LHS | SINGLE_ASSIGNMENT_LHS) ELLIPSES_FOR_TEST_CASES_TABLE* COLUMN_SEP_TOKEN KEYWORD_CALLING_TEST